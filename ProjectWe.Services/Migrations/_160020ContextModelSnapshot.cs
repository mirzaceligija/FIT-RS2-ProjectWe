// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectWe.Services.Database;

#nullable disable

namespace ProjectWe.Services.Migrations
{
    [DbContext(typeof(_160020Context))]
    partial class _160020ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 381, DateTimeKind.Utc).AddTicks(8361));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("DirectBeneficiaries")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndirectBeneficiaries")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 381, DateTimeKind.Utc).AddTicks(8510));

                    b.Property<string>("Locations")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OutputId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId");

                    b.HasIndex("OutputId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Activities", (string)null);

                    b.HasData(
                        new
                        {
                            ActivityId = 1,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(311),
                            Description = "Test",
                            EndDate = new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(310),
                            OutputId = 1,
                            ProjectId = 1,
                            StartDate = new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(309),
                            UserId = 2
                        },
                        new
                        {
                            ActivityId = 2,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(318),
                            Description = "Test",
                            EndDate = new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(318),
                            OutputId = 1,
                            ProjectId = 1,
                            StartDate = new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(317),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ProjectWe.Services.Database.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(1098));

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(1246));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AppRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "079e2914-753a-4c3f-b8d0-8f368fd2a50d",
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(1343),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "79e72872-f936-49d9-96bb-9f38c52f7d0b",
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(1348),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("ProjectWe.Services.Database.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(7483));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(7591));

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AppUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b275a23-24e7-4bbc-86c5-5f24843d0062",
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(7667),
                            Email = "admin@email.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Super",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJSnLX1fQLSM0GHZgeHn7+BQiABcmmD5rMhOu5DCTCHh3huSn3kevRq8fmUQJ0urqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VHFSXSTATK7ARJ7NGKNMU2TOAEL6GDZU",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b275a23-24e7-4bbc-86c5-5f24843d0062",
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(7687),
                            Email = "manager@email.com",
                            EmailConfirmed = true,
                            FirstName = "Manager",
                            LastName = "Super",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@EMAIL.COM",
                            NormalizedUserName = "MANAGER",
                            PasswordHash = "AQAAAAEAACcQAAAAEJSnLX1fQLSM0GHZgeHn7+BQiABcmmD5rMhOu5DCTCHh3huSn3kevRq8fmUQJ0urqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VHFSXSTATK7ARJ7NGKNMU2TOAEL6GDZU",
                            TwoFactorEnabled = false,
                            UserName = "Manager"
                        });
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Budget", b =>
                {
                    b.Property<int>("BudgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BudgetId"), 1L, 1);

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<decimal>("CostPerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(8206));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(8289));

                    b.Property<int>("NumberOfUnits")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalCost")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([CostPerUnit]*[NumberOfUnits])", false);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BudgetId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Budgets", (string)null);

                    b.HasData(
                        new
                        {
                            BudgetId = 1,
                            ActivityId = 1,
                            CostPerUnit = 0m,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(9810),
                            Description = "Test",
                            NumberOfUnits = 0,
                            ProjectId = 1,
                            UserId = 2
                        },
                        new
                        {
                            BudgetId = 2,
                            ActivityId = 1,
                            CostPerUnit = 0m,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(9813),
                            Description = "Test",
                            NumberOfUnits = 0,
                            ProjectId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(185));

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(272));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(352),
                            Name = "Civic engagement and participation"
                        },
                        new
                        {
                            CategoryId = 2,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(354),
                            Name = "Volunteerism and community service"
                        },
                        new
                        {
                            CategoryId = 3,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(355),
                            Name = "Youth development"
                        },
                        new
                        {
                            CategoryId = 4,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(356),
                            Name = "Neighborhood revitalization"
                        },
                        new
                        {
                            CategoryId = 5,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(357),
                            Name = "Interfaith and intercultural understanding"
                        },
                        new
                        {
                            CategoryId = 6,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(358),
                            Name = "Aging and elder care"
                        },
                        new
                        {
                            CategoryId = 7,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(359),
                            Name = "Food security and access"
                        });
                });

            modelBuilder.Entity("ProjectWe.Services.Database.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(600));

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(704));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("CityId");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(750),
                            Name = "Sarajevo"
                        },
                        new
                        {
                            CityId = 2,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(752),
                            Name = "Mostar"
                        },
                        new
                        {
                            CityId = 3,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(753),
                            Name = "Banja Luka"
                        },
                        new
                        {
                            CityId = 4,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(754),
                            Name = "Zenica"
                        },
                        new
                        {
                            CityId = 5,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(755),
                            Name = "Tuzla"
                        });
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Objective", b =>
                {
                    b.Property<int>("ObjectiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObjectiveId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(1049));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(1124));

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ObjectiveId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Objectives", (string)null);

                    b.HasData(
                        new
                        {
                            ObjectiveId = 1,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(1974),
                            Description = "Objective 1",
                            ProjectId = 1,
                            UserId = 2
                        },
                        new
                        {
                            ObjectiveId = 2,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(1976),
                            Description = "Objective 1",
                            ProjectId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Output", b =>
                {
                    b.Property<int>("OutputId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OutputId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(2367));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Indicators")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(2459));

                    b.Property<string>("MeansOfVerification")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("ObjectiveId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OutputId");

                    b.HasIndex("ObjectiveId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Outputs", (string)null);

                    b.HasData(
                        new
                        {
                            OutputId = 1,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(3740),
                            Description = "Output 1",
                            ObjectiveId = 1,
                            ProjectId = 1,
                            UserId = 2
                        },
                        new
                        {
                            OutputId = 2,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(3743),
                            Description = "Output 1",
                            ObjectiveId = 2,
                            ProjectId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(4074));

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(4166));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects", (string)null);

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            CategoryId = 1,
                            CityId = 1,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(6037),
                            Description = "Project Description 1",
                            Name = "Project 1",
                            StatusId = 3,
                            UserId = 1
                        },
                        new
                        {
                            ProjectId = 2,
                            CategoryId = 2,
                            CityId = 2,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(6042),
                            Description = "Project Description 2",
                            Name = "Project 2",
                            StatusId = 3,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(6390));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(6483));

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", (string)null);

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(7740),
                            Description = "Review 1",
                            ProjectId = 1,
                            StatusId = 2,
                            UserId = 1
                        },
                        new
                        {
                            ReviewId = 2,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(7743),
                            Description = "Review 2",
                            ProjectId = 2,
                            StatusId = 3,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(8060));

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(8138));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses", (string)null);

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(8184),
                            Name = "Submitted"
                        },
                        new
                        {
                            StatusId = 2,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(8187),
                            Name = "Needs Improvment"
                        },
                        new
                        {
                            StatusId = 3,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(8188),
                            Name = "Active"
                        },
                        new
                        {
                            StatusId = 4,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(8189),
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Vote", b =>
                {
                    b.Property<int>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoteId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(8472));

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(8548));

                    b.Property<bool>("Positive")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("VoteId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes", (string)null);

                    b.HasData(
                        new
                        {
                            VoteId = 1,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(9352),
                            Positive = true,
                            ProjectId = 1,
                            UserId = 1
                        },
                        new
                        {
                            VoteId = 2,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(9354),
                            Positive = true,
                            ProjectId = 1,
                            UserId = 2
                        },
                        new
                        {
                            VoteId = 3,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(9355),
                            Positive = true,
                            ProjectId = 2,
                            UserId = 1
                        },
                        new
                        {
                            VoteId = 4,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 383, DateTimeKind.Utc).AddTicks(9356),
                            Positive = false,
                            ProjectId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ProjectWe.Services.Database.AppUserRoles", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(1667));

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(1770));

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(5463)
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(5466)
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2,
                            CreatedAt = new DateTime(2023, 5, 1, 22, 29, 19, 382, DateTimeKind.Utc).AddTicks(5469)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ProjectWe.Services.Database.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ProjectWe.Services.Database.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ProjectWe.Services.Database.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ProjectWe.Services.Database.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Activity", b =>
                {
                    b.HasOne("ProjectWe.Services.Database.Output", "Output")
                        .WithMany("Activities")
                        .HasForeignKey("OutputId")
                        .IsRequired()
                        .HasConstraintName("FK_Activity__OutputId");

                    b.HasOne("ProjectWe.Services.Database.Project", "Project")
                        .WithMany("Activities")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Activity_ProjectId");

                    b.HasOne("ProjectWe.Services.Database.AppUser", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Activity_UserId");

                    b.Navigation("Output");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Budget", b =>
                {
                    b.HasOne("ProjectWe.Services.Database.Activity", "Activity")
                        .WithMany("Budgets")
                        .HasForeignKey("ActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_Budgets__ActivityId");

                    b.HasOne("ProjectWe.Services.Database.Project", "Project")
                        .WithMany("Budgets")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Budgets_ProjectId");

                    b.HasOne("ProjectWe.Services.Database.AppUser", "User")
                        .WithMany("Budgets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Budgets_UserId");

                    b.Navigation("Activity");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Objective", b =>
                {
                    b.HasOne("ProjectWe.Services.Database.Project", "Project")
                        .WithMany("Objectives")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Objective_ProjectId");

                    b.HasOne("ProjectWe.Services.Database.AppUser", "User")
                        .WithMany("Objectives")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Objective_UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Output", b =>
                {
                    b.HasOne("ProjectWe.Services.Database.Objective", "Objective")
                        .WithMany("Outputs")
                        .HasForeignKey("ObjectiveId")
                        .IsRequired()
                        .HasConstraintName("FK_Outputs_ObjectiveId");

                    b.HasOne("ProjectWe.Services.Database.Project", "Project")
                        .WithMany("Outputs")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Outputs_ProjectId");

                    b.HasOne("ProjectWe.Services.Database.AppUser", "User")
                        .WithMany("Outputs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Outputs_UserId");

                    b.Navigation("Objective");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Project", b =>
                {
                    b.HasOne("ProjectWe.Services.Database.Category", "Category")
                        .WithMany("Projects")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Projects_CategoryId");

                    b.HasOne("ProjectWe.Services.Database.City", "City")
                        .WithMany("Projects")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Projects_CityId");

                    b.HasOne("ProjectWe.Services.Database.Status", "Status")
                        .WithMany("Projects")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Projects_StatusId");

                    b.HasOne("ProjectWe.Services.Database.AppUser", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Projects_UserId");

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Review", b =>
                {
                    b.HasOne("ProjectWe.Services.Database.Project", "Project")
                        .WithMany("Reviews")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Reviews_ProjectId");

                    b.HasOne("ProjectWe.Services.Database.Status", "Status")
                        .WithMany("Reviews")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Reviews_StatusId");

                    b.HasOne("ProjectWe.Services.Database.AppUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Reviews_UserId");

                    b.Navigation("Project");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Vote", b =>
                {
                    b.HasOne("ProjectWe.Services.Database.Project", "Project")
                        .WithMany("Votes")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Votes_ProjectId");

                    b.HasOne("ProjectWe.Services.Database.AppUser", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Votes_UserId");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectWe.Services.Database.AppUserRoles", b =>
                {
                    b.HasOne("ProjectWe.Services.Database.AppRole", "AppRole")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_AppUserRoles_RoleId");

                    b.HasOne("ProjectWe.Services.Database.AppUser", "AppUser")
                        .WithMany("AppUserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_AppUserRoles_UserId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", null)
                        .WithOne()
                        .HasForeignKey("ProjectWe.Services.Database.AppUserRoles", "UserId", "RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Activity", b =>
                {
                    b.Navigation("Budgets");
                });

            modelBuilder.Entity("ProjectWe.Services.Database.AppRole", b =>
                {
                    b.Navigation("AppUserRoles");
                });

            modelBuilder.Entity("ProjectWe.Services.Database.AppUser", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("AppUserRoles");

                    b.Navigation("Budgets");

                    b.Navigation("Objectives");

                    b.Navigation("Outputs");

                    b.Navigation("Projects");

                    b.Navigation("Reviews");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Category", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectWe.Services.Database.City", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Objective", b =>
                {
                    b.Navigation("Outputs");
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Output", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Project", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Budgets");

                    b.Navigation("Objectives");

                    b.Navigation("Outputs");

                    b.Navigation("Reviews");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("ProjectWe.Services.Database.Status", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
